import asyncio
from typing import List
import logging
from logging.handlers import RotatingFileHandler
import os
from io import BytesIO

import requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, exceptions
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile, InputMediaPhoto
from grok3api.client import GrokClient

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("bot.log", maxBytes=2 * 1024 * 1024, backupCount=2, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
if not os.path.exists('.env'):
    with open('.env', 'w') as f:
        f.writelines(['BOT_BOT_TOKEN=\n', 'BOT_ALLOWED_USER_IDS=\n',
                     'BOT_MESSAGE_HISTORY_COUNT=10\n', 'BOT_PERSONALITY=\n',
                      'WORKER_URL=\n'])
    logger.info('–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è.')
    exit(1)

load_dotenv()
BOT_TOKEN = os.getenv('BOT_BOT_TOKEN', None) or exit(logger.error('BOT_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω'))
ALLOWED_USER_IDS = [int(uid) for uid in os.getenv('BOT_ALLOWED_USER_IDS', '').split() if uid.strip()] or exit(logger.error('BOT_ALLOWED_USER_IDS –Ω–µ —É–∫–∞–∑–∞–Ω'))
MESSAGE_HISTORY_COUNT = int(os.getenv('BOT_MESSAGE_HISTORY_COUNT', 10))
PERSONALITY = os.getenv('BOT_PERSONALITY', '')
WORKER_URL = os.getenv('WORKER_URL', '')

GROK_CLIENT: GrokClient
bot = Bot(token=BOT_TOKEN)
router = Router()
dp = Dispatcher()


async def upload_to_worker(text):
    try:
        response = requests.post(WORKER_URL, data=text)
        if response.status_code == 200 and response.text.startswith("https://"):
            logger.debug(f"–°—Å—ã–ª–∫–∞ –Ω–∞ MD Viewer: {response.text}")
            return response.text
        else:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Worker: {response.status_code}, {response.text}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ Worker: {e}")
        return None

async def safe_target_reply(message: types.Message, text: str, parse_mode: str = None,
                            reply_to_message_id: int = None,
                            **kwargs):
    try:
        await message.answer(text, parse_mode=parse_mode, reply_to_message_id=reply_to_message_id, **kwargs)
    except exceptions.TelegramBadRequest as e:
        if "message to be replied not found" in e.message.lower():
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ reply_to_message_id: {e}")
            await message.answer(text, parse_mode=parse_mode, **kwargs)
        raise e

async def reply_long_message(message: types.Message, text, max_length=4000):
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {message.chat.id}, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")

    if not text.strip():
        logger.error("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await safe_target_reply(message, "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_to_message_id=message.message_id)
        return

    worker_link = None
    if WORKER_URL:
        if len(text) > max_length or any(char in text for char in ("#", "*", "`")):
            worker_link = await upload_to_worker(text)

    if len(text) <= max_length:
        await send_with_fallback(message, text, worker_link)
        return

    if await send_md_view(message, text, worker_link):
        return

    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        split_pos = text.rfind(' ', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()

    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")

    for i, part in enumerate(parts):
        await send_with_fallback(message, part, worker_link, is_last=(i == len(parts) - 1))


async def send_with_fallback(message: types.Message, text: str, worker_link: str = None, is_last: bool = True):
    reply_markup = None
    link_text = f"\n\n[üåê –û—Ç–≤–µ—Ç –Ω–∞ MarkForge]({worker_link})" if worker_link and is_last else ""

    try:
        if worker_link and is_last:
            builder = InlineKeyboardBuilder()
            builder.button(text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç", url=worker_link)
            reply_markup = builder.as_markup()

        await safe_target_reply(
            message, f"{text}{link_text}", parse_mode="Markdown",
            reply_to_message_id=message.message_id, reply_markup=reply_markup
        )
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Markdown: {e}")
        try:
            await safe_target_reply(
                message, link_text, parse_mode="Markdown",
                reply_to_message_id=message.message_id, reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ HTML: {e}")
            await safe_target_reply(message, text, reply_to_message_id=message.message_id)


async def send_md_view(message: types.Message, full_text, worker_link) -> bool:
    try:
        file_buffer = BytesIO(full_text.encode("utf-8"))
        file_buffer.name = "answer.md"

        link_text = f"[üåê –û—Ç–≤–µ—Ç –Ω–∞ MarkForge]({worker_link})" if worker_link else "üìÑ –û—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª–µ"

        builder = InlineKeyboardBuilder()
        builder.button(text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç", url=worker_link)
        reply_markup = builder.as_markup() if worker_link else None

        if worker_link:
            await safe_target_reply(message, link_text, parse_mode="Markdown",
                                    reply_to_message_id=message.message_id, reply_markup=reply_markup)
        else:
            await message.answer_document(
                types.BufferedInputFile(file_buffer.read(), filename=file_buffer.name),
                caption="üìÑ –û—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª–µ", parse_mode="Markdown", reply_to_message_id=message.message_id
            )
            logger.debug(f"–§–∞–π–ª {file_buffer.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_md_view: {e}")
        return False



@router.message(~F.text.startswith("/"))
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if message.from_user.id not in ALLOWED_USER_IDS:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return
    if message and message.from_user:
        if message.from_user.username:
            sender = "@" + message.from_user.username
        else:
            sender_first_name = message.from_user.first_name or ""
            sender_last_name = message.from_user.last_name or ""
            sender = sender_first_name + " " + sender_last_name
            if sender.strip() == "" or sender.isspace():
                sender = message.from_user.id
    else:
        sender = message.chat.id
    logger.info(f"–í—Ö–æ–¥—è—â–µ–µ –æ—Ç {sender}: {message.text or message.caption}")

    chat_id = str(message.chat.id)
    msg_text = await get_media_preview(message) or ""
    msg_text += message.text or message.caption or ""

    if not msg_text.strip():
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ 'typing' –≤ —á–∞—Ç")

        response = await GROK_CLIENT.async_ask(message=msg_text, history_id=chat_id)
        text_response = response.modelResponse.message if response.modelResponse else ""

        await reply_long_message(message, text_response)

        if response.modelResponse.generatedImages:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(response.modelResponse.generatedImages)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            await bot.send_chat_action(chat_id=message.chat.id, action="upload_photo")
            media = []
            for img in response.modelResponse.generatedImages:
                image_file = await img.async_download()
                image_file.seek(0)
                media.append(InputMediaPhoto(media=BufferedInputFile(image_file.read(), filename="image.jpg")))

            await bot.send_media_group(chat_id=message.chat.id, media=media)
            logger.debug("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

        GROK_CLIENT.history.to_file()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        await bot.send_chat_action(chat_id=message.chat.id, action="cancel")
        logger.debug("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

@router.message(Command("clear"))
async def handle_clean_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clean –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    if message.from_user.id not in ALLOWED_USER_IDS:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É /clean –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /clean –æ—Ç {message.from_user.id}")
    try:
        chat_id = str(message.chat.id)

        GROK_CLIENT.history.del_history_by_id(chat_id)
        GROK_CLIENT.history.to_file()
        GROK_CLIENT.history.from_file()

        logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞")

        GROK_CLIENT.history.to_file()
        logger.debug("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
        logger.debug("–û—Ç–≤–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–í handle_clean_command: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

async def get_media_preview(message: Message) -> str:
    try:
        placeholders: List[str] = []
        if message.photo: placeholders.append("*–§–æ—Ç–æ –≤ –ø–ª–æ—Ö–æ–º –∫–∞—á–µ—Å—Ç–≤–µ*\n")
        if message.animation: placeholders.append("*–ê–Ω–∏–º–∞—Ü–∏—è —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º*\n")
        if message.video: placeholders.append("*–í–∏–¥–µ–æ –≤ –ø–ª–æ—Ö–æ–º –∫–∞—á–µ—Å—Ç–≤–µ*\n")
        if message.video_note: placeholders.append("*–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º*\n")
        if message.sticker and message.sticker.thumbnail:
            placeholders.append(f"*—Å—Ç–∏–∫–µ—Ä: {message.sticker.emoji}*\n" if message.sticker.emoji
                              else "*–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä*\n")
        if message.audio: placeholders.append("*–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º*\n")
        if message.voice: placeholders.append("*–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º*\n")
        if message.document: placeholders.append("*–î–æ–∫—É–º–µ–Ω—Ç, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å*\n")
        if message.contact: placeholders.append("*–ö–æ–Ω—Ç–∞–∫—Ç, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è*\n")
        if message.location: placeholders.append("*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞*\n")
        if message.venue: placeholders.append("*–ú–µ—Å—Ç–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è*\n")
        if message.poll: placeholders.append("*–û–ø—Ä–æ—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≤–∏–¥–Ω—ã*\n")
        if message.dice: placeholders.append("*–ö—É–±–∏–∫, –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ*\n")
        if message.game: placeholders.append("*–ò–≥—Ä–∞, –ø—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n")
        if message.invoice: placeholders.append("*–°—á–µ—Ç, –¥–µ—Ç–∞–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è*\n")
        if message.successful_payment: placeholders.append("*–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã*\n")
        if message.passport_data: placeholders.append("*–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞*\n")
        if message.proximity_alert_triggered: placeholders.append("*–¢—Ä–µ–≤–æ–≥–∞ –æ –±–ª–∏–∑–æ—Å—Ç–∏, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*\n")
        if message.forum_topic_created: placeholders.append("*–¢–µ–º–∞ —Ñ–æ—Ä—É–º–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n")
        if message.forum_topic_edited: placeholders.append("*–¢–µ–º–∞ —Ñ–æ—Ä—É–º–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–∏–¥–Ω—ã*\n")
        if message.forum_topic_closed: placeholders.append("*–¢–µ–º–∞ —Ñ–æ—Ä—É–º–∞ –∑–∞–∫—Ä—ã—Ç–∞*\n")
        if message.forum_topic_reopened: placeholders.append("*–¢–µ–º–∞ —Ñ–æ—Ä—É–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–Ω–æ–≤–æ*\n")
        if message.video_chat_scheduled: placeholders.append("*–í–∏–¥–µ–æ—á–∞—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω, –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ*\n")
        if message.video_chat_started: placeholders.append("*–í–∏–¥–µ–æ—á–∞—Ç –Ω–∞—á–∞–ª—Å—è, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*\n")
        if message.video_chat_ended: placeholders.append("*–í–∏–¥–µ–æ—á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω*\n")
        if message.video_chat_participants_invited: placeholders.append("*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥–µ–æ—á–∞—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã, —Å–ø–∏—Å–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω*\n")
        if message.web_app_data: placeholders.append("*–î–∞–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç*\n")
        if message.reply_markup: placeholders.append("*–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è*\n")
        return "".join(placeholders) if placeholders else ""
    except Exception as e:
        logger.error(f"–í get_media_preview: {e}")
        return ""


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global GROK_CLIENT
    GROK_CLIENT = GrokClient(history_msg_count=MESSAGE_HISTORY_COUNT,
                             cookies="YOUR_BROWSER_COOKIES")

    GROK_CLIENT.history.set_main_system_prompt(PERSONALITY)

    await bot.delete_webhook(drop_pending_updates=True)
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())